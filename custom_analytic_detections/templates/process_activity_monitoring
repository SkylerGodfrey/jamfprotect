# process_activity_monitoring
#
# This resource provides guidance and templates for monitoring process events with a Custom Analytic.
# Please see the following resources for more information:
# - README.md of this repository section
# - Jamf Protect Documentation: https://docs.jamf.com/jamf-protect/documentation/Analytics.html
# - Jamf Protect UI Documentation, at Adminstration > Documentation

# NOTE: It is strongly recommended to test any Custom Analytics in a testing environment and on test endpoints before deploying into a production environment.


# Required Analytic Configuration:

Sensor Event Type: GPProcessEvent

# Recommended Analytic Configuration:

Severity: Informational        
Level: 0 


#### Predicate Syntax Guidance

# Targeting specific process event types
# In order to target a specific process event (e.g. creation, exit) we must include the type condition in the analytic predicate:
# $event.type == 1      This will identify process creations
# $event.type == 2      This will identify process exits


## Targeting processes by identifiers
# In order to detect the activity of a specific process (or multiple) an identifier for the process must be included in the Analytic predicate.  Here are just some of the viable options:
# $event.process.signingInfo.appid == "com.app.identifier"     This is the app identifier specified for the binary / application when code-signed.  Run 'codesign -dv /path/to/binary' in Terminal to find this value. 

# $event.process.signingInfo.teamid == "team-id-here"          This is the Team ID of the Apple Developer that code-signed the binary or app that spawned the process.  This value will likely apply to any binary or app signed by that developer and is therefore likely not specific to a particular binary or app.

# $event.process.name == "Process Name"                        This is the name of the process as it appears in Activity Monitor.

# $event.process.path == "/path/to/binary"                     This is the full path to the binary that spawned the process.

# $event.process.appPath == "/path/to/name.app"                This is the full path to the application associated with the process.

# In many of the predicate templates provided below, the app identifier (e.g. com.app.identifier) is used to identify the binary / process we wish to monitor.
# This is by design as it means the process creation by that binary will be detected regardles of the process name or location.  However, this could theoretically be swapped for any of the above alternatives (or others available) if desired or needed, depending on the situation.


## Targeting process arguments
# Process activity with associated process arguments can be identified using the following syntax:
# $event.process.commandLine CONTAINS[cd] "process arg here"

# This will cause only processes with arguments that match the provided string to be detected.  The string may be a binary verb or value passed to a verb.  See template examples below.
# Multiple process argument conditions can be used in the predicate, such as:
# ($event.process.commandLine CONTAINS[cd] "process arg one" OR $event.process.commandLine CONTAINS[cd] "process arg two")     This will alert when EITHER process arg is detected
# ($event.process.commandLine CONTAINS[cd] "process arg one" AND $event.process.commandLine CONTAINS[cd] "process arg two")    This will alert when BOTH process args is detected

# It is helpful to include [cd] with this condition to ensure process args will be detected regardless of case sensitivity or usage of diacritics (accented characters).



#### Template Analytic Predicates

#### Monitoring Process Creations

## All process creations by a specific binary (warning: potentially quite noisy)
$event.type == 1 AND $event.process.signingInfo.appid == "com.app.identifier"

## Process creations with specific binary verbs used as process arguments
# With a single specific verb / argument
$event.type == 1 AND $event.process.signingInfo.appid == "com.app.identifier" AND $event.process.commandLine CONTAINS[cd] "process arg here"

# With multiple specific verbs / arguments where a single one is detected
$event.type == 1 AND $event.process.signingInfo.appid == "com.app.identifier" AND ($event.process.commandLine CONTAINS[cd] "process arg here" OR $event.process.commandLine CONTAINS[cd] "process arg here")

# With multiple specific verbs / arguments where every one is detected
$event.type == 1 AND $event.process.signingInfo.appid == "com.app.identifier" AND ($event.process.commandLine CONTAINS[cd] "process arg here" AND $event.process.commandLine CONTAINS[cd] "process arg here")


## Process creations through interative terminal session (such as through Terminal.app)
$event.type == 1 AND $event.process.signingInfo.appid == "com.app.identifier" AND $event.process.tty != nil



#### Monitoring Process Exists

## Process exits by name
# Single process name
$event.type == 2 AND $event.process.name == "Process Name"

# Multiple process names
$event.type == 2 AND $event.process.name IN {'Process name', 'Process name'}

## Process exits by binary application ID (code signing information)
# Single binary application ID
$event.type == 2 AND $event.process.signingInfo.appid == "com.app.identifier"

# Multiple binary application IDs
$event.type == 2 AND $event.process.signingInfo.appid IN {'com.app.identifier', 'com.app.identifier'}

## Process exits by Team ID
$event.type == 2 AND $event.process.signingInfo.teamid == "team-id-here"
