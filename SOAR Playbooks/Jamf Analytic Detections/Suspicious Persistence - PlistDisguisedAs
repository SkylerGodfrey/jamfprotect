#!/bin/bash
####################################################################################################
#
# Copyright (c) 2021, Jamf, LLC.  All rights reserved.
#
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are met:
#               * Redistributions of source code must retain the above copyright
#                 notice, this list of conditions and the following disclaimer.
#               * Redistributions in binary form must reproduce the above copyright
#                 notice, this list of conditions and the following disclaimer in the
#                 documentation and/or other materials provided with the distribution.
#               * Neither the name of the JAMF Software, LLC nor the
#                 names of its contributors may be used to endorse or promote products
#                 derived from this software without specific prior written permission.
#
#       THIS SOFTWARE IS PROVIDED BY JAMF SOFTWARE, LLC "AS IS" AND ANY
#       EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#       WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#       DISCLAIMED. IN NO EVENT SHALL JAMF SOFTWARE, LLC BE LIABLE FOR ANY
#       DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#       (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#       LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#       ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
####################################################################################################
#  Suspicious Persistence - PlistDisguisedAs
#
#
#  Created by Matt Taylor on 21/09/2021.
#  v1.0
#
# This script is designed as a response workflow executed by Jamf Pro after Jamf Protect detects a suspicious persistence item was created with either the PlistDisguisedAsApple or PlistDisguisedAsGoogle analytics.
#
# Script functions
# - Capture the Launch item and executable from the Jamf Protect alert
# - Capture additional information from the device about the event from the LSQuarantineEventsV2 database
# - Capture addtional logging from the system from the install.log and system.log
# - Compress the artefacts and some event information and attempt an upload to the specified Amazon S3 service
# - Backup the artefacts if backup is enabled and is necessary due to a failed upload
# - Optionally call upon additional Jamf Pro Policies by a custom trigger
# - Clean up the Extension Attribute file created by Jamf Protect and submit a Jamf Pro inventory to reset the workflow

# Script Dependencies
# - A folder named 'IRSupport' at /Library/Application Support/ is used for assets when using the IBM Notifier.app for end-user communication and file backup
# - The AWS CLI is used for file uploads to Amazon's S3 service and can be downloaded here: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-mac.html
#
# Both these dependencies must be pre-staged to your devices in order for this workflow to complete fully.  Please the see github.com/jamf/jamfprotect Wiki for more information.

#####################################################
############# Script Configuration Area #############
#####################################################

# Set the Extended Attribute value that the analytic in Jamf Protect will use to trigger the Jamf Pro integration and response workflow.  This is configured inside the analytic by enabling the 'Add to Jamf Pro Smart Group', is case sensitive and must match for this workflow to work
# Note that this workflow requires a custom analytic detection monitoring for new files created in the /Library/Application Support/JamfProtect/Quarantine directory in order to function
analyticEA="PlistDisguisedAs"

# Incident Response directory containing resources for this workflow.  By default the files expected in this directory are:
# - IBM Notifier.app and icon file for end-user notifications (if enabled)
# IMPORTANT: This path and resources must be pre-staged prior to this workflow.  If missing, elements of the workflow that require it will not function.  Please refer to the Github Wiki for more information.
IRSupportDIR="/Library/Application Support/IRSupport"

# Artefact acquisition settings
# Enable or disable artefact acqusition in this script.  Expected options are:
# "yes" = artefacts will be uploaded to S3
# "no" = artefacts will not be uploaded to S3
artefactAcquisition="yes"
# Location of the AWS CLI binary, a default symlink path is used and may be retained.
awsBinary="/usr/local/bin/aws"
# The name of the target S3 bucket resource
bucket=""
# The S3 Access Key ID to use for the upload
s3AccessKeyID=""
# The S3 Secret Key to use for the upload
s3SecretKey=""
# The region of the S3 bucket to use.  Example: us-east-1
s3BucketRegion=""

# Artefact backup settings
# Enable or disable backup of acquired artefacts should no network connectivity for the upload be available or if the upload is attempted but fails.  Expected options are:
# "yes" = artefacts will be backed up
# "no" = artefacts will not be backed up
# IMPORTANT: This is a valuable feature to ensure that quarantined files can be gathered.  Pair with an Extension Attribute in Jamf Pro to add an additional collection workflow for failed uploads after thef act.
artefactBackup="yes"
backupDIR="${IRSupportDIR}/ArtefactBackups"

# Additional artefact collection from a Jamf Pro Policy settings
# Set this to yes and provide a custom trigger to call a second Jamf Pro Policy for additional artefact collection following this event
# "yes" = the Jamf Pro binary will be used to check for additional Policies
# "no" = no action will be taken
moreJamfPro="no"
# IMPORTANT: If "yes" is chosen a custom trigger must be specified
customTrigger=""

#####################################################
############ DO NOT EDIT BELOW THIS LINE ############
#####################################################

################# Script Functions ##################

# Capture the Jamf Protect alert that contains information about the event that we need to continue
CaptureAlert () {
    alertCapture=$(/usr/bin/log show --last 1m --predicate 'subsystem == "com.jamf.protect.daemon" && category == "Alert" && (eventMessage CONTAINS "PlistDisguisedAs")')

    # Extract the name of the Launch item
    launchItemName=$(echo "$alertCapture" | /usr/bin/grep -o '"name":"Name","value": *"[^"]*"' | /usr/bin/grep -o '"value": *"[^"]*"' | /usr/bin/grep -o '"[^"]*"$' | /usr/bin/sed -e 's/"//g' )
    
    export launchItemName
    
    # Find the full file path for the created Launch item
    launchItemPath=$(/usr/bin/find /Library/LaunchDaemons /Library/LaunchAgents -name "$launchItemName")
    
    export launchItemPath

    # Extract the full path for the executable specified in the Launch item
    itemBinaryPath=$(echo "$alertCapture" | /usr/bin/grep -o '"name":"ItemBinary","value": *"[^"]*"' | /usr/bin/grep -o '"value": *"[^"]*"' | /usr/bin/grep -o '"[^"]*"$' | /usr/bin/sed -e 's/"//g' -e 's/\\//g')
    
    export itemBinaryPath

    echo "The Launch item file name to acquire is:
    ${launchItemName}"
    
    echo "The Launch item file path to acquire is:
    ${launchItemPath}"

    echo "The Launch item binary being executed in this Launch item is:
    ${itemBinaryPath}"
}

# Check for the required launch items to confirm if the script should continue
CheckForFiles () {
    if [[ -z "$launchItemPath" ]]; then
        
        echo "There is no Launch item path present and this is key to this workflow so the operation will aborted."
        
        exit 1
        
    else
    
        echo "A Launch item path is present so this workflow and operations will now begin."
        
    fi
}

# Check for and create the IRSupport directory if necessary
CheckIRSupportDIR () {
    echo "Checking that the ${IRSupportDIR} directory exists.."
    
    if [[ ! -d "$IRSupportDIR" ]]; then
    
        echo "The ${IRSupportDIR} directory doesn't exist so it will be created."
        /bin/mkdir -p "$IRSupportDIR"
    
    fi
}

# Create the working directory
CreateWorkingDIR () {
    echo "Creating the temporary working directory.."
    
    workingDIR="/private/tmp/JPIR"
    
    /bin/mkdir -p "$workingDIR"
}

# Capture the Launch item and executable
CaptureLaunchFiles () {
    /bin/cp -pR "$launchItemPath" "$itemBinaryPath" "$workingDIR"
}

# Create the event log
CreateEventLog () {
    # Event information file
    eventLog="${workingDIR}/Event.log"
    
    # Create the file
    /usr/bin/touch "$eventLog"
    
    # Capture the serial number of the endpoint
    serialNumber=$(/usr/sbin/system_profiler SPHardwareDataType | awk '/Serial/ {print $4}')
    
    # Create a file of basic information regarding the event
    echo "Endpoint and Event Information:
Hostname: $(hostname)
Serial Number: ${serialNumber}
Jamf Protect Event: ${analyticEA}
Date of Collection: $(date)" >> "$eventLog"
}

# Function #
# Check for the com.apple.quarantine Extended Attribute and gather additional artefacts and information if possible
GetQuarantineInfo () {

    /bin/cp -pR /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 "$workingDIR"

    quarantineID=$(/usr/bin/xattr -l "$launchItemPath" | /usr/bin/grep com.apple.quarantine | /usr/bin/awk -F ';' '{print$NF}')
    
    export quarantineID

    echo "The com.apple.quarantine identifier for the downloaded file is: ${quarantineID}" >> "$eventLog"
    
    # Confirm if the com.apple.quarantine Extended Attribute was available from the downloaded file and, if so, capture all relevant information regarding the download event from the LSQuarantineEvents database
    if [[ ! -z "$quarantineID" ]]; then

        LSQTimeStamp=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineTimeStamp from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQBundleID=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineAgentBundleIdentifier from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQAgentName=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineAgentName from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQDataURLString=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineDataURLString from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQSenderName=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineSenderName from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQSenderAddress=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineSenderAddress from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        LSQOriginURLString=$(/usr/bin/sqlite3 /Users/"$loggedInUser"/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'select LSQuarantineOriginURLString from LSQuarantineEvent where LSQuarantineEventIdentifier = "'"$quarantineID"'";')

        echo "
    LSQuarantineEvent Database Information:
    Download Timestamp: ${LSQTimeStamp}
    App Bundle ID that initiated the download: ${LSQBundleID}
    App Agent Name that initiated the download: ${LSQAgentName}
    Final Download URL: ${LSQDataURLString}
    Origin Download URL(s): ${LSQOriginURLString}
    Sender Name (where applicable): ${LSQSenderName}
    Sender Address (where applicable): ${LSQSenderAddress}
    " >> "$eventLog"
    
        # Check if the download came from these popular browsers and if so capture the browser / download history for further investigation
        if [[ "$LSQBundleID" == "com.apple.Safari" ]]; then

            # Capture the recent Safari downloads history
            /bin/cp /Users/"$loggedInUser"/Library/Safari/Downloads.plist "$workingDIR"
            echo "Safari Download history has been captured and saved in the Downloads.plist file at ${workingDIR}" >> "$eventLog"

        elif [[ "$LSQBundleID" == "com.google.Chrome" ]]; then
    
            # Capture the recent Google Chrome downloads history
            /bin/cp /Users/"$loggedInUser"/Library/Application Support/Google/Chrome/Default/GoogleChromeHistory "$workingDIR"
            echo "Google Chrome Download history has been captured and saved in the GoogleChromeHistory database file at ${workingDIR}" >> "$eventLog"
    
        elif [[ "$LSQBundleID" == "org.mozilla.firefox" ]]; then

            # Capture the recent Firefox downloads history
            /bin/cp /Users/"$loggedInUser"/Library/Application Support/Firefox/Profiles/*.default-release/places.sqlite "$workingDIR"
            echo "Firefox Download history has been captured and saved in the places.sqlite database file at ${workingDIR}" >> "$eventLog"
    
        else
        
            echo "An unrecognised bundle identifier for the download source application was found so browser history wasn't gathered."
        
        fi
        
    else

        # The com.apple.quarantine extended attribute was missing so we were unable to gather any information from it
        echo "The com.apple.quarantine Extended Attribute was missing from the downloaded file so it wasn't possible to automatically collect the download event information from the LSQuarantine database.  Instead, please refer to the database file inside the acquired artefacts."

    fi

}

# Get additional artefacts for further investigation
GetAdditionalArtefacts () {
    # Create directory for additional logging
    export logFilesDIR="${workingDIR}/LogFiles"
    
    # Make the log files directory
    /bin/mkdir -p "$logFilesDIR"
    
    # Pull the install.log
    /bin/cp /private/var/log/install.log* "$logFilesDIR"
    echo "Package installation logging has been captured at saved at ${logFilesDIR}" >> "$eventLog"
    
    # Pull the system.log
    /bin/cp /private/var/log/system.log* "$logFilesDIR"
    echo "System logging has been captured at saved at ${logFilesDIR}" >> "$eventLog"
}


# Compress the files in the working directory for acquisition
CompressArtefacts () {
    # Process the upload of the artefacts to the nominated S3 bucket
    file="$(date +%Y%m%d_%H%M)-${serialNumber}-JPIR-Artefacts.tar.gz"
    
    # Move into the working directory and compress the quarantined file(s) for upload
    cd "$workingDIR" && /usr/bin/tar czf "$file" *

    # Move out of the working directory
    cd /Users/Shared
}

# Back up the artefacts if configured to do so
ArtefactBackup () {
    echo "Backing up of acquired artefacts is enabled and the operation will now proceed."
    
    # Check for and make the backup directory if it doesn't already exist
    if [[ ! -d "$backupDIR" ]]; then
    
        echo "The artefact backup directory doesn't exist so it will now be created."
        /bin/mkdir -p "$backupDIR"
        
    fi
        
    # Copy the file to the backup directory
    echo "The artefacts file will be coped to the backup directory"
    /bin/cp "$workingDIR"/"$file" "$backupDIR"
        
    # Remove permissions for users to access this file
    if [[ -f "$backupDIR"/"$file" ]]; then
    
        /bin/chmod 000 "$backupDIR"/"$file"
        echo "The artefacts file was successfully copied to the backup directory and permissions set to restrict access."
    
    else
    
        echo "The artefacts file was not successfully copied to the backup directory and may be lost from the temporary working directory at next system restart."
        
    fi
}

# Attempt to upload the artefacts to the Amazon S3 service
AcquireArtefacts () {
    if [[ ! -z "$bucket" ]] && [[ ! -z "$s3AccessKeyID" ]] && [[ ! -z "$s3SecretKey" ]] && [[ ! -z "$s3BucketRegion" ]]; then
    
        echo "Artefact acquisition is enabled and the required variables are not empty so the upload operation will begin now.."
    
        # Set variables required for the AWS S3 service upload
        export AWS_ACCESS_KEY_ID="$s3AccessKeyID"
        export AWS_SECRET_ACCESS_KEY="$s3SecretKey"
        export AWS_DEFAULT_REGION="$s3BucketRegion"
    
        # Check for the AWS binary being installed and Upload the file to the S3 bucket if so
        if [[ -f "$awsBinary" ]]; then
            
            echo "The AWS binary is present, initiating the upload.."
            "$awsBinary" s3 cp "$workingDIR"/"$file" s3://"$bucket"
            
            export uploadStatus=$?
            
            # Report back the status of the upload.  If 0 then the upload was successful, if any code other than 0 than it was a failure
            if [[ "$uploadStatus" -eq 0 ]]; then
                
                echo "The artefact upload to the S3 service was successful and finished with exit code ${uploadStatus}."
                
            else
            
                echo "The artefact upload to the S3 service failed with error code ${uploadStatus}."
                
            fi
            
        else
        
            echo "Artefact acquisition was enabled and configured but the AWS binary wasn't available to use so the operation was aborted."
            # Record a failure for artefact backup operation
            export uploadStatus="1"
            
        fi
    
    else
        
        # Artefact acquisition was enabled but was misconfigured
        echo "Artefact acquisition was enabled but misconfigured so the operation was aborted."
        echo "Artefact acquisition configuration: ${artefactAcquisition}"
        # Record a failure for artefact backup operation
        export uploadStatus="1"
        
    fi
}

# Check for network connectivity to the Amazon S3 service and begin the upload operation if available
NetworkCheckAndUpload () {
    if /usr/bin/nc -zdw1 s3.amazonaws.com 443; then
        
        networkUP="yes"
        echo "Can the device connect to the S3 bucket for upload? Result: ${networkUP}"
        echo "Network connectivity is available so the artefect upload will proceed.."
    
        # Call function
        AcquireArtefacts
    
    else
        
        networkUP="no"
        echo "Can the device connect to the S3 bucket for upload? Result: ${networkUP}"
        
    fi
}

# Check the status of the upload and the backup settings to determine if the artefacts should be backed up locally
BackupOperation () {
    if [[ "$uploadStatus" != 0 ]] && [[ "$artefactBackup" == "yes" ]]; then
    
        echo "Network connectivity is available but the artefact upload to the S3 service failed.  Artefact backup is enabled so this operation will now begin."
        # Call function
        ArtefactBackup
        
    elif [[ "$uploadStatus" != 0 ]] && [[ "$artefactBackup" == "no" ]]; then
    
        echo "Network connectivity is available but the artefact upload to the S3 service failed.  Artefact backup is disabled so this operation will be skipped."

    elif [[ "$networkUP" == "no" ]] && [[ "$artefactBackup" == "yes" ]]; then
    
        echo "Network connectivity is unavailable and artefact backup is enabled so the backup operation will now begin.."
        # Call function
        ArtefactBackup
        
    elif [[ "$networkUP" == "no" ]] && [[ "$artefactBackup" == "no" ]]; then
    
        echo "Network connectivity is unavailable and artefact backup is disabled."

    fi
}

# Call additional Jamf Pro policies by custom trigger if configured to do so
AdditionalJamfProPolicy () {
    # Trigger any additional Policies from Jamf Pro as configured
    if [[ "$moreJamfPro" == "yes" ]] && [[ "$customTrigger" != "" ]]; then
    
        echo "Calling additional Jamf Pro Policy workflows as configured to do so."
        /usr/local/bin/jamf policy -event "$customTrigger" &

    elif [[ "$moreJamfPro" == "yes" ]] && [[ "$customTrigger" == "" ]]; then

        echo "Additional Jamf Po Policy workflows were configured to be called but no custom trigger was specified in the configuration section of this script so the operation was aborted."
    
    elif [[ "$moreJamfPro" != "yes" ]]; then
    
        echo "Additional Jamf Pro Policy triggering was not enabled or was misconfigured."
        echo "Configuration for additional Jamf Pro workflows was: ${moreJamfPro}"
    
    fi
}

# Clean up the workflow and remove the device from the Jamf Pro Smart Group to reset this workflow
CleanUp () {
    # Make sure the working directory variable isn't rempty before removing it
    if [[ ! -z "$workingDIR" ]]; then
        
        echo "Removing the temporary working directory.."
        /bin/rm -rf "$workingDIR"
    
    else
    
        echo "Attempted to remove the temporary working directory but the action was aborted as no path was provided."
    
    fi
    
    # Clean up the Jamf Protect and Jamf Pro remediation workflow files and submit a new inventory report to cause the device to fall out of the incident response workflow Smart Group
    if [[ ! -z "$analyticEA" ]]; then

        echo "Cleaning up the extension attribute file created by Jamf Protect to reset this workflow"
    
        # Delete the extension attribute file created by Jamf Protect
        /bin/rm "/Library/Application Support/JamfProtect/groups/${analyticEA}"

    else
        
        echo "Attempted to clean up the extension attribute file created by Jamf Protect to reset this workflow but no file path was provided."
    
    fi

    # Submit a new Jamf Pro inventory submission to cause the device to leave the incident response workflow Smart Group
    /usr/local/bin/jamf recon &
}

#####################################################
############### Workflow Starts Here ################
#####################################################
set -o nounset

# Capture the logged-in User
loggedInUser=$(/usr/sbin/scutil <<< "show State:/Users/ConsoleUser" | /usr/bin/awk '/Name :/ && ! /loginwindow/ { print $3 }')

# Call function
CaptureAlert

# Call function
CheckForFiles

# Call function
CheckIRSupportDIR

# Call function
CreateWorkingDIR

# Call function
CaptureLaunchFiles

# Call function
CreateEventLog

# Call function
GetQuarantineInfo

# Call function
GetAdditionalArtefacts

# Call function
CompressArtefacts

# Call function
NetworkCheckAndUpload

# Call function
BackupOperation

#####################################################
#### Additional Jamf Pro Policy Workflow Section ####

# Call function
AdditionalJamfProPolicy

#####################################################
########## Cleanup and Resolution Section ###########

# Call function
CleanUp
